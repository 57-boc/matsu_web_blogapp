.article#article-show{data: {article_id: @article.id}}
  - if @article.eyecatch.attached?
    -# articleにeyecatchが保存されているとき
    .article_image
      = image_tag @article.eyecatch
  %h1.article_title= @article.title
  .article_detail
    = link_to account_path(@article.user) do
      = image_tag @article.user.avatar_image
    %div
      -# - if @article.user.present?
        -# @articleでuser情報があるとき=>完全に存在するように設定しなおしたので不要
      -# %p= @article.user.display_name=>自作のarthor_nameに変更
      %p= @article.author_name
      %p= @article.display_created_at
    - if user_signed_in? && current_user.has_written?(@article)
      -# ログインしている、かつ、自作のhas_written(user.rb)を使って記事を書いてるかチェック
      .article_detail_actions
        .dropdown
          = image_tag 'actions.svg', class: 'dropbtn'
          .dropdown-content.mini
            = link_to '編集する', edit_article_path(@article)
            = link_to '削除する', article_path(@article), data: {method: 'delete', confirm: '本当に削除してもよろしいですか?'}
            / link_to は基本的にgetリクエスト data: {method: 'delete'}によってdeleteリクエストを送る
  .article_content
    = @article.content
  - if user_signed_in?
    .article_heart.hidden.actine-heart
      = link_to article_like_path(@article), data: {method: 'delete'} do
        -# すでにいいねしていて、もう一度イイねボタン押された場合レコードをdeleteする
        = image_tag 'heart-active.svg'

    .article_heart.hidden.inactine-heart
      = link_to article_like_path(@article), data: {method: 'post'} do
        -# いいねレコードにこの記事を追加する
        = image_tag 'heart.svg'

.article
  %h2 コメント一覧
  - @comments.each do |comment|
    .article_comment
      %p= comment.content

.container
  = link_to new_article_comment_path(@article) do
    -# コメントのnew画面に遷移する（引数:articleを渡さないとどの記事がわからない）
    .btn-secondary 
      コメントを追加
